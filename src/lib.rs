mod log;

const AES_BLOCK_SIZE: usize = 16;

#[cfg(test)]
prog_log!(aes_log, crate::Block);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
struct Block([u8; AES_BLOCK_SIZE]);

type Word = [u8; 4];
// State[column][row]
type State = [Word; 4];

#[derive(Debug, Clone, PartialEq, Eq)]
struct AES {
    key: Vec<u8>,
}

impl AES {
    const S_BOX: &'static [u8] = &[
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB,
        0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4,
        0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71,
        0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2,
        0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6,
        0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB,
        0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45,
        0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
        0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44,
        0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A,
        0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49,
        0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D,
        0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25,
        0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E,
        0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1,
        0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB,
        0x16,
    ];

    const INV_S_BOX: &'static [u8] = &[
        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7,
        0xFB, 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE,
        0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42,
        0xFA, 0xC3, 0x4E, 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49,
        0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C,
        0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15,
        0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7,
        0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
        0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC,
        0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD,
        0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D,
        0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B,
        0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 0x1F, 0xDD, 0xA8,
        0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51,
        0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0,
        0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C,
        0x7D,
    ];

    fn new(key: &[u8]) -> Result<Self, &'static str> {
        if ![16, 24, 32].contains(&key.len()) {
            return Err("Invalid key length");
        }
        Ok(Self { key: key.to_vec() })
    }

    #[inline]
    fn block2state(block: Block) -> State {
        let mut state = [[0u8; 4]; 4];
        for i in 0..4 {
            for j in 0..4 {
                state[i][j] = block.0[i * 4 + j];
            }
        }
        state
    }

    #[inline]
    fn state2block(state: State) -> Block {
        let mut block = [0u8; AES_BLOCK_SIZE];
        for i in 0..4 {
            for j in 0..4 {
                block[i * 4 + j] = state[i][j];
            }
        }
        Block(block)
    }

    #[inline]
    fn log_state(state: &State) {
        #[cfg(test)]
        aes_log::push(AES::state2block(*state));
    }

    #[inline]
    fn log_keys(keys: &[Word]) {
        #[cfg(test)]
        {
            assert_eq!(keys.len() % 4, 0);
            let mut i = 4;
            while i <= keys.len() {
                aes_log::push(AES::state2block([
                    keys[i - 4],
                    keys[i - 3],
                    keys[i - 2],
                    keys[i - 1],
                ]));
                i += 4;
            }
        }
    }

    fn encrypt_block(&self, block: Block) -> Block {
        let state = AES::block2state(block);
        AES::log_state(&state);
        let round_key = self.key_expansion();
        AES::log_keys(&round_key);

        AES::state2block(state)
    }

    fn key_expansion(&self) -> Vec<Word> {
        fn rot_word(word: Word) -> Word {
            [word[1], word[2], word[3], word[0]]
        }

        fn sub_word(word: Word) -> Word {
            let mut new_word = [0u8; 4];
            for i in 0..4 {
                new_word[i] = AES::S_BOX[word[i] as usize];
            }
            new_word
        }

        fn word_xor(word1: Word, word2: Word) -> Word {
            let mut new_word = [0u8; 4];
            for i in 0..4 {
                new_word[i] = word1[i] ^ word2[i];
            }
            new_word
        }
        let mut wlist: Vec<Word> = Vec::new();
        let rcon = [
            [0x01, 0x00, 0x00, 0x00],
            [0x02, 0x00, 0x00, 0x00],
            [0x04, 0x00, 0x00, 0x00],
            [0x08, 0x00, 0x00, 0x00],
            [0x10, 0x00, 0x00, 0x00],
            [0x20, 0x00, 0x00, 0x00],
            [0x40, 0x00, 0x00, 0x00],
            [0x80, 0x00, 0x00, 0x00],
            [0x1b, 0x00, 0x00, 0x00],
            [0x36, 0x00, 0x00, 0x00],
        ];

        let nk = match self.key.len() {
            16 => 4,
            24 => 6,
            32 => 8,
            _ => unreachable!(),
        };

        let nr = match nk {
            4 => 10,
            6 => 12,
            8 => 14,
            _ => unreachable!(),
        };

        for i in 0..nk {
            wlist.push([
                self.key[i * 4],
                self.key[i * 4 + 1],
                self.key[i * 4 + 2],
                self.key[i * 4 + 3],
            ]);
        }
        for i in nk..4 * (nr + 1) {
            let mut temp = wlist[i - 1];
            if i % nk == 0 {
                temp = word_xor(sub_word(rot_word(temp)), rcon[i / nk - 1]);
            } else if nk == 8 && i % nk == 4 {
                temp = sub_word(temp);
            }
            wlist.push(word_xor(wlist[i - nk], temp));
        }
        wlist
    }
}

#[cfg(test)]
mod tests {
    use crate::{AES, Block, aes_log};

    fn setup() {
        aes_log::clear();
    }

    #[test]
    fn test() {
        const CIPHER_KEY: &[Block] = &[Block([
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ])];

        const EXPANDED_KEYS: &[Block] = &[
            Block([
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ]),
            Block([
                0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c,
                0x76, 0x05,
            ]),
            Block([
                0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59,
                0xf6, 0x7f,
            ]),
            Block([
                0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a,
                0x88, 0x3b,
            ]),
            Block([
                0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b,
                0xad, 0x00,
            ]),
            Block([
                0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9,
                0x15, 0xbc,
            ]),
            Block([
                0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00,
                0x93, 0xfd,
            ]),
            Block([
                0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6,
                0xdc, 0x4f,
            ]),
            Block([
                0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d,
                0x29, 0x2f,
            ]),
            Block([
                0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c,
                0x00, 0x6e,
            ]),
            Block([
                0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63,
                0x0c, 0xa6,
            ]),
        ];
        setup();
        let plain_text = b"k\xc1\xbe\xe2.@\x9f\x96\xe9=~\x11s\x93\x17*";
        let aes = AES::new(&CIPHER_KEY[0].0).ok().unwrap();
        let _encrypted = aes.encrypt_block(Block(*plain_text));
        let log = aes_log::get();
        let expected = [&[Block(*plain_text)], EXPANDED_KEYS].concat();
        assert_eq!(log.borrow().len(), expected.len());
        log.borrow()
            .iter()
            .zip(expected.into_iter())
            .for_each(|(a, b)| {
                assert_eq!(a, &b);
            });
    }

    #[test]
    fn fail_on_invalid_key_length() {
        setup();
        let key = [0u8; 10];
        let aes = AES::new(&key);
        assert_eq!(aes, Err("Invalid key length"));
    }
}
